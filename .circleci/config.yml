# Use the latest 2.1 version of CircleCI pipeline process engine.
version: 2.1

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

jobs: 
  Build:
    docker:
      - image: cimg/python:3.11.4
    steps:
      - checkout
      - restore_cache:
          keys: [pythonAppBuild]
      - run:
          name: Build python app
          command: |
            python --version
            cd python
            python main.py
      - save_cache:
          paths: [python/save_cache]
          key: pythonAppBuild

  Test:
    docker:
      - image: cimg/python:3.11.4
    steps:
      - checkout
      - restore_cache:
          keys: [pythonAppBuild]
      - run:
          name: Test python app
          command: |
            python --version
            cd python
            python main_test.py

  Scan:
    docker:
      - image: cimg/python:3.11.4
    steps:
      - checkout
      - restore_cache:
          keys: [pythonAppBuild]
      - run:
          name: Scan python app
          command: |
            python --version
            cd python
            python main_scan.py

  Deploy-infrastructure:  # Job Name
    docker:
      - image: cimg/aws:2023.05  # Spcecify The AWS image.

    steps:  # Job Steps
      - checkout  # checkout code from GitHub
      - restore_cache:
          keys: [pythonAppBuild]
      - run: pwd
      - run:
          name: Build ec2 instance
          command: |
            aws cloudformation deploy \
              --template-file CloudFormation/cloudformation.yml \
              --tags project=circleci \
              --stack-name "Circleci-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

            aws cloudformation wait stack-create-complete \
            --stack-name "Circleci-${CIRCLE_WORKFLOW_ID:0:7}"

            aws cloudformation describe-stacks \
            --stack-name "Circleci-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Stacks[0].Outputs[?OutputKey==`PublicIp`].OutputValue' \
            --output text
      - run:
          name: Print faild events
          when: on_fail
          command: |
            aws cloudformation describe-stack-events --stack-name "Circleci-${CIRCLE_WORKFLOW_ID:0:7}"


  Build-python-app:  # Job Name
    docker:
      - image: cimg/aws:2023.05  # Spcecify The AWS image.

    steps:  # Job Steps
      - checkout  # checkout code from GitHub
      - restore_cache:
          keys: [pythonAppBuild]

      - run:
          name: Wait for the stack to be created
          command: |
            aws cloudformation wait stack-create-complete \
            --stack-name "Circleci-${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Fetch the ec2 Pub IP
          command: |
            aws cloudformation describe-stacks \
            --stack-name "Circleci-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Stacks[0].Outputs[?OutputKey==`PublicIp`].OutputValue' \
            --output text
            pwd
            
      - run: ls -lh; cat text

      - run:
          name: SSH & Build python app
          command: |
            public_ip=$(cat text)
            echo "$public_ip"

            aws ec2 describe-key-pairs \
            --key-name ec2_01 \
            --query 'KeyPairs[0].KeyMaterial' \
            --output text > ~/.ssh/	ec2_01.pem
            chmod 400 ~/.ssh/ec2_01.pem

            ssh -i ~/.ssh/ec2_01.pem ec2-user@$public_ip 'ls -la /tmp'
            # fetch python script for build
            # run

  Test-python-app:  # Job Name
    docker:
      - image: cimg/aws:2023.05  # Spcecify The AWS image.

    steps:  # Job Steps
      - checkout  # checkout code from GitHub
      - restore_cache:
          keys: [pythonAppBuild]
      - run: pwd
      - run:
          name: Build python app
          command: |
            # ssh
            # fetch python script for test
            # run

  Scan-python-app:  # Job Name
    docker:
      - image: cimg/aws:2023.05  # Spcecify The AWS image.

    steps:  # Job Steps
      - checkout  # checkout code from GitHub
      - restore_cache:
          keys: [pythonAppBuild]
      - run: pwd
      - run:
          name: Build python app
          command: |
            # ssh
            # fetch python script for scan
            # run

workflows:
  Python_App:
    jobs:
      - Build
      - Test:
          requires: [Build]
      - Scan:
          requires: [Build]

      - Deploy-infrastructure:
          requires: [Test, Scan]

      - Build-python-app:
          requires: [Deploy-infrastructure]
      - Test-python-app:
          requires: [Build-python-app]
      - Scan-python-app:
          requires: [Build-python-app]


